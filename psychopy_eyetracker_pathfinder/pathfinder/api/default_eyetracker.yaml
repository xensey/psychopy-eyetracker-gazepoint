eyetracker.hw.pathfinder.api.EyeTracker:
    # Indicates if the device should actually be loaded at experiment runtime.
    enable: True

    # The variable name of the device that will be used to access the ioHub Device class
    # during experiment run-time, via the devices.[name] attribute of the ioHub
    # connection or experiment runtime class.
    name: tracker

    # Should eye tracker events be saved to the ioHub DataStore file when the device
    # is recording data ?
    save_events: True

    # Should eye tracker events be sent to the Experiment process when the device
    # is recording data ?
    stream_events: True

    # How many eye events (including samples) should be saved in the ioHub event buffer before
    # old eye events start being replaced by new events. When the event buffer reaches
    # the maximum event length of the buffer defined here, older events will start to be dropped.
    event_buffer_length: 1024

    # The Pathfinder implementation of the common eye tracker interface supports the
    # BinocularEyeSampleEvent event type.
    monitor_event_types: [ PathfinderSampleEvent ]

    runtime_settings:
        sampling_rate: Auto
        track_eyes: [BINOCULAR,]

    # device_timer: The Pathfinder EyeTracker class uses the polling method to
    #   check for new events received from the EyeTracker device.
    #   device_timer.interval specifies the sec.msec time between device polls.
    #   0.005 = 5 msec, so the device will be polled at a rate of 200 Hz.
    device_timer:
        interval: 0.005

    # Specify the IP address and port that iohub should use to connect to the Pathfinder tracker.
    # Default values are for localhost connection (single PC setup).
    network_settings:
        ip_address: 127.0.0.1
        port: 4242

    calibration:
        # True: Use Pathfinder Control app calibration window.
        # False: Use custom calibration graphics.
        use_builtin: False

        # Remaining calibration settings are only used if 'use_builtin' == False
        #
        # Number of calibration points to present.
        # THREE_POINTS,FIVE_POINTS,NINE_POINTS
        type: FIVE_POINTS

        # color_type: rgb, rgb255, named, hex, etc. Leave blank to use window's color space.
        color_type:

        # unit_type: norm, pix, height, deg, etc. Leave blank to use window's unit type.
        unit_type:

        # Should the target positions be randomized?
        randomize: True

        # screen_background_color specifies the r,g,b background color to
        # set the calibration, validation, etc, screens to.
        screen_background_color: [128,128,128]

        # text_color specifies the foreground color of any text used during calibration.
        # If empty, text_color is calculated automatically based on screen_background_color.
        text_color:

        # target_type: Defines what form of calibration graphic should be used
        # during calibration, validation, etc. Valid options are CIRCLE_TARGET, or CUSTOM.
        target_type: CIRCLE_TARGET

        # The associated target attribute properties can be supplied
        # for the given target_type.
        target_attributes:
             # outer_diameter: The size of the outer circle of the calibration target
             outer_diameter: 40.0

             # outer_stroke_width: The thickness of the outer circle edge.
             outer_stroke_width: 2.0

             # outer_fill_color: color to use to fill the outer circle.
             outer_fill_color: [64,64,64]

             # outer_line_color: color to used for the outer circle edge.
             outer_line_color: [255,255,255]

             # inner_diameter: The size of the inner circle calibration target
             inner_diameter: 15.0

             # inner_stroke_width: The thickness of the inner circle edge.
             inner_stroke_width: 1.0

             # inner_fill_color: color to use to fill the inner circle.
             inner_fill_color: [0,255,0]

             # inner_line_color: color to used for the inner circle edge.
             inner_line_color: [0,0,0]

             # 'animate' controls target movement and expansion / contraction (if any).
             animate:
                 enable: True
                 expansion_ratio: 2.0
                 contract_only: False
